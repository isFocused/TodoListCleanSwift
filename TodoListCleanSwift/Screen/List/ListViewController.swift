//
//  ListViewController.swift
//  TodoListCleanSwift
//
//  Created by Denis Ivanov on 23.02.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListDisplayLogic: AnyObject {
	func displaySomething(viewModel: List.Something.ViewModel)
}

final class ListViewController: UITableViewController, ListDisplayLogic {
	
	
	var interactor: ListBusinessLogic?
	var router: (NSObjectProtocol & ListRoutingLogic & ListDataPassing)?
	var dataSourse: ListDataSourse!
	
	// MARK: Object lifecycle
	
	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}
	
	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		setup()
	}
	
	// MARK: Setup
	
	private func setup() {
		let viewController = self
		let interactor = ListInteractor()
		let presenter = ListPresenter()
		let router = ListRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
	}
	
	// MARK: View lifecycle
	
	override func viewDidLoad() {
		super.viewDidLoad()
		doSomething()
	}
	
	// MARK: Do something
	
	func doSomething() {
		interactor?.doSomething(request: .start)
	}
	
	func displaySomething(viewModel: List.Something.ViewModel) {
		switch viewModel {
		case .initial(let sections):
			dataSourse = ListDataSourse()
			dataSourse?.handler = { [weak self] in
				guard let self = self else { return }
				self.interactor?.doSomething(request: .update(sections: self.dataSourse.sections, id: $0))
			}
			dataSourse?.sections = sections
			tableView.dataSource = dataSourse
		case .reload(let sections):
			dataSourse?.sections = sections
		}
		tableView.reloadData()
	}
}
